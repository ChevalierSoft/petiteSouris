<!DOCTYPE html>
<html>
<head>
    <!-- ? fill iPhone screen with canvas -->
    <meta name="viewport" content="width=400" />
    <title>Petite Souris</title>
	<link rel="icon" href="https://cdn.betterttv.net/emote/5f43037db2efd65d77e8a88f/3x.webp" type="image/gif" >
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
	<style>
		html {
			background-color: #000000;
		}
	</style>
</head>

<body>
    <canvas id="can"></canvas>

	<!-- <div class="columns is-full is-mobile">
		<div class="column is-half ">
			<button class="button is-fullwidth is-large is-mobile">Bouton 1</button>
		</div>
		<div class="column is-half ">
			<button class="button is-fullwidth is-large is-mobile">Bouton 2</button>
		</div>
	</div> -->

</body>

<script type="text/javascript">
	let can = document.getElementById("can");
	let ctx = can.getContext("2d");
	let canX, canY, mouseIsDown = 0, mouseIsMoving = false, mouseClickPressed = false;
	let cc = 0;
	let bs = 100, speed = 3;
	// let url = getUrlParameter('host') + ':8080';
	let socket = new WebSocket('ws://{{ .SERVER_URL }}:{{ .SERVER_PORT }}/ws');
	can.width = window.innerWidth;
	can.height = window.innerHeight;

	init();
	
	function init() {

		can.addEventListener("mousedown", mouseDown, false);
		can.addEventListener("mousemove", mouseXY, false);
		can.addEventListener("touchstart", touchDown, false);
		can.addEventListener("touchmove", touchXY, true);
		can.addEventListener("touchend", touchUp, false);

		document.body.addEventListener("mouseup", mouseUp, false);
		document.body.addEventListener("touchcancel", touchUp, false);

		window.addEventListener("resize", function() {
			can.width = window.innerWidth;
			can.height = window.innerHeight;
		});

		showPos();

		socket.onopen = function(){
			console.log('connected');
			socket.send('hello');
		}
		socket.onmessage = function(msg){
			console.log(msg.data);
		}
		socket.onclose = function(){
			console.log('closed');
		}
	}

	function mouseUp() {
		mouseIsDown = 0;
		mouseIsMoving = false;
		mouseClickPressed = false;
		mouseXY();
	}

	function touchUp() {
		mouseIsDown = 0;
		mouseIsMoving = false;
		mouseClickPressed = false;
		showPos();
	}

	function mouseDown() {
		if (mouseIsDown == 0)
		{
			mouseIsDown = 1;
			if (canY < can.height - bs)
				mouseIsMoving = true;
			else
				mouseIsMoving = false;
			let e = event;
			canX = e.pageX - can.offsetLeft;
			canY = e.pageY - can.offsetTop;
			console.log("reset");
			// return ;
		}
		mouseXY();
	}

	function touchDown() {
		if (mouseIsDown == 0)
		{
			mouseIsDown = 1;
			if (canY < can.height - bs)
				mouseIsMoving = true;
			else
				mouseIsMoving = false;
			let e = event;
			canX = e.targetTouches[0].pageX - can.offsetLeft;
			canY = e.targetTouches[0].pageY - can.offsetTop;
			console.log("reset");
			// return ;
		}
		touchXY();
	}

	function mouseXY(e, pmid) {
		if (canX > can.width || canY > can.height)
			return ;
		if (!e)
			var e = event;
		pcanX = canX;
		pcanY = canY;
		canX = e.pageX - can.offsetLeft;
		canY = e.pageY - can.offsetTop;
		ax = (canX - pcanX) * speed;
		ay = (canY - pcanY) * speed;
		socket.send('pos{'
			+ `"X":` + ax + ','
			+ `"Y":` + ay + '}'
		);
		showPos();
	}

	function touchXY() {
		// if (canX > can.width || canY > can.height) // ? oob
		// 	return ;
		if (mouseIsMoving)
		{
			if (!e)
				var e = event;
			e.preventDefault();
			pcanX = canX;
			pcanY = canY;
			canX = e.targetTouches[0].pageX - can.offsetLeft;
			canY = e.targetTouches[0].pageY - can.offsetTop;
			ax = (canX - pcanX) * speed;
			ay = (canY - pcanY) * speed;
			socket.send('pos{'
				+ `"X":` + ax + ','
				+ `"Y":` + ay + '}'
			);
		}
		else if (!mouseClickPressed)
		{
			mouseClickPressed = true;
			if (canX > 0 && canX < can.width / 2 && canY > can.height - bs && canY < can.height) // left click
				leftClick();
			else if (canX > can.width / 2 && canX < can.width && canY > can.height - bs && canY < can.height) // right click
				rightClick();
		}
		showPos();
	}

	function showPos() {
		// ? large, centered, bright green text
		ctx.font = "24pt Helvetica";
		ctx.textAlign = "center";
		ctx.textBaseline = "middle";
		ctx.fillStyle = "rgb(64,255,64)";
		var str = canX + ", " + canY;
		if (mouseIsDown)
			str += " down";
		if (!mouseIsDown)
			str += " up";
		ctx.clearRect(0, 0, can.width, can.height);
		// ? draw text at center, max length to fit on canvas
		ctx.fillText(str, can.width / 2, can.height / 2, can.width - 10);
		// click buttons
		ctx.fillStyle = "pink";
		ctx.fillRect(0, can.height - bs, can.height, 4);
		ctx.fillRect(can.width/2 - 2, can.height - bs, 4, 100);
		// ? plot cursor
		ctx.fillStyle = "white";
		ctx.fillRect(canX - 5, canY - 5, 10, 10);
		// ? print url on canvas
		ctx.fillText("{{ .SERVER_URL }}", can.width / 2, 12, can.width - 12);
	}

	function leftClick() {
		socket.send('left');
	}

	function rightClick() {
		socket.send('right');
	}

	function scrollUp() {
		socket.send('up');
	}

	function scrolldown() {
		socket.send('down');
	}

	function getUrlParameter(name) {
		name = RegExp ('[?&]' + name.replace (/([[\]])/, '\\$1') + '=([^&#]*)');
		return (window.location.href.match (name) || ['', ''])[1];
	}

</script>

</html>
